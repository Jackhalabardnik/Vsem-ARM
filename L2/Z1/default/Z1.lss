
Z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000076  00000000  00000000  0000011b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000041  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000079  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000085  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 44 00 	jmp	0x88	; 0x88 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include "lcd.h"

int main(void)
{
	PORTB = 0x01;				// podci¹gam PINB 0 pod zasilanie
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	88 bb       	out	0x18, r24	; 24
	
	TCCR0 |= 0x07;				// W³¹czam timer ustawiaj¹c zród³o zegara jako zbocze narastaj¹ce
  70:	83 b7       	in	r24, 0x33	; 51
  72:	87 60       	ori	r24, 0x07	; 7
  74:	83 bf       	out	0x33, r24	; 51
	//TCCR0 |= 0x06;				// W³¹czam timer ustawiaj¹c zród³o zegara jako zbocze opadaj¹ce

	TCNT0 = 253;
  76:	8d ef       	ldi	r24, 0xFD	; 253
  78:	82 bf       	out	0x32, r24	; 50
	
	while (1)
	{
		if(TIFR & 0x01)					// Je¿eli wykryjê przepe³nienie to wy³¹czam timer
  7a:	08 b6       	in	r0, 0x38	; 56
  7c:	00 fe       	sbrs	r0, 0
  7e:	fd cf       	rjmp	.-6      	; 0x7a <main+0xe>
		{
			TCCR0 &= 0xFC;				// Wy³¹czam timer
  80:	83 b7       	in	r24, 0x33	; 51
  82:	8c 7f       	andi	r24, 0xFC	; 252
  84:	83 bf       	out	0x33, r24	; 51
  86:	f9 cf       	rjmp	.-14     	; 0x7a <main+0xe>

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
