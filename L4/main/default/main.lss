
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001d2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000ad  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000045a  00000000  00000000  00000343  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000163  00000000  00000000  0000079d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000035a  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000013b  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001bf  00000000  00000000  00000e57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "lcd.h"					// Do³¹czam moj¹ bibliotekê

int main(void)
{
    LCD_INIT();						// Inicjalizujê wyœwietlacz
  82:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_INIT>
	char *imie = "Jacek Wojcik";	// Zapisujê swoje imiê w zmiennej
	LCD_WRITE(imie);				// Wyœwietlam imiê na wyœwietlaczu
  86:	80 e6       	ldi	r24, 0x60	; 96
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_WRITE>
    while (1) 
    {
		asm volatile("nop");		// Wykonujê niekoñczon¹ pêtlê przez resztê czasu
  8e:	00 00       	nop
  90:	fe cf       	rjmp	.-4      	; 0x8e <main+0xc>

00000092 <sendHalfByte>:
#include "lcd.h"

void sendHalfByte(char data)
{
	PORTA |= 0x02; 								// Wysy³am flagê ENABLE
  92:	d9 9a       	sbi	0x1b, 1	; 27
	PORTA = (PORTA & 0x0F) | (data & 0xF0);		// Wysy³am pó³ bajta
  94:	9b b3       	in	r25, 0x1b	; 27
  96:	80 7f       	andi	r24, 0xF0	; 240
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	89 2b       	or	r24, r25
  9c:	8b bb       	out	0x1b, r24	; 27
	PORTA &= 0xFD;								// Usuwam flagê ENABLE
  9e:	d9 98       	cbi	0x1b, 1	; 27
}
  a0:	08 95       	ret

000000a2 <sendByte>:

void sendByte(char data)
{
  a2:	1f 93       	push	r17
  a4:	18 2f       	mov	r17, r24
	sendHalfByte(data);							// Wysy³am górn¹ po³owê bajtu
  a6:	0e 94 49 00 	call	0x92	; 0x92 <sendHalfByte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  aa:	84 ef       	ldi	r24, 0xF4	; 244
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <sendByte+0xc>
	_delay_ms(2);								// OpóŸnienie w celu wykrycia stanu "0" na pinie ENABLE
	sendHalfByte(data << 4);					// Wysy³am doln¹ po³owê bajtu
  b2:	81 2f       	mov	r24, r17
  b4:	82 95       	swap	r24
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	0e 94 49 00 	call	0x92	; 0x92 <sendHalfByte>
}
  bc:	1f 91       	pop	r17
  be:	08 95       	ret

000000c0 <sendCommand>:

void sendCommand(char data)
{
	sendByte(data);								// Wysy³am komendê
  c0:	0e 94 51 00 	call	0xa2	; 0xa2 <sendByte>
  c4:	82 ee       	ldi	r24, 0xE2	; 226
  c6:	94 e0       	ldi	r25, 0x04	; 4
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <sendCommand+0x8>
	_delay_ms(5);								// Czekam na przetworzenie komendy
}
  cc:	08 95       	ret

000000ce <sendChar>:

void sendChar(char data)
{
	sendByte(data);								// Wysy³am znak
  ce:	0e 94 51 00 	call	0xa2	; 0xa2 <sendByte>
  d2:	84 ef       	ldi	r24, 0xF4	; 244
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <sendChar+0x8>
	_delay_ms(2);								// Czekam na wypisanie znaku
}
  da:	08 95       	ret

000000dc <LCD_CLEAR>:

void LCD_CLEAR()
{
	PORTA &= 0xFE;								// Prze³¹czam LCD w tryb wprowadzania komend
  dc:	d8 98       	cbi	0x1b, 0	; 27
  de:	84 ef       	ldi	r24, 0xF4	; 244
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_CLEAR+0x6>
	_delay_ms(2);								// OpóŸnienie w celu wykrycia stanu "0" na pinie RS
	sendCommand(0x01);							// Czyszczê wyœwietlacz
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 60 00 	call	0xc0	; 0xc0 <sendCommand>
	PORTA |= 0x01;								// Prze³¹czam LCD w tryb wprowadzania danych
  ec:	d8 9a       	sbi	0x1b, 0	; 27
}
  ee:	08 95       	ret

000000f0 <LCD_INIT>:
  f0:	86 ea       	ldi	r24, 0xA6	; 166
  f2:	9e e0       	ldi	r25, 0x0E	; 14
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_INIT+0x4>

void LCD_INIT()
{
	_delay_ms(15); 								// Czekam a¿ wyœwietlacz LCD zostanie zainicjalizowany

	DDRA |= 0xF3;								// Ustawiam czêœæ linii A
  f8:	8a b3       	in	r24, 0x1a	; 26
  fa:	83 6f       	ori	r24, 0xF3	; 243
  fc:	8a bb       	out	0x1a, r24	; 26
		
	// Inicjalizacja standardowymi bajtami
	sendHalfByte(0x30);							
  fe:	80 e3       	ldi	r24, 0x30	; 48
 100:	0e 94 49 00 	call	0x92	; 0x92 <sendHalfByte>
 104:	82 ee       	ldi	r24, 0xE2	; 226
 106:	94 e0       	ldi	r25, 0x04	; 4
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_INIT+0x18>
	_delay_ms(5);								// Czekam zgodnie z dokumentacj¹
	sendHalfByte(0x30);							
 10c:	80 e3       	ldi	r24, 0x30	; 48
 10e:	0e 94 49 00 	call	0x92	; 0x92 <sendHalfByte>
 112:	8a ef       	ldi	r24, 0xFA	; 250
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_INIT+0x26>
	_delay_ms(1);
	sendCommand(0x32);
 11a:	82 e3       	ldi	r24, 0x32	; 50
 11c:	0e 94 60 00 	call	0xc0	; 0xc0 <sendCommand>
	
	// Inicjalizacja ustawieñ wyœwietlacza
	sendCommand(0x28);							// Ustawiam tryb 2 linii i znaków 5x8
 120:	88 e2       	ldi	r24, 0x28	; 40
 122:	0e 94 60 00 	call	0xc0	; 0xc0 <sendCommand>
	sendCommand(0x08);							// Wy³¹czam wyœwietlacz zgodnie z dokumentacj¹
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	0e 94 60 00 	call	0xc0	; 0xc0 <sendCommand>
	sendCommand(0x01);							// Czyszczê wyœwietlacz
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 60 00 	call	0xc0	; 0xc0 <sendCommand>
	sendCommand(0x06);							// Ustawiam kierunek wyprowadzania tekstu i sposób wyprowadzania na wyœwietlacz
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	0e 94 60 00 	call	0xc0	; 0xc0 <sendCommand>
	sendCommand(0x0F);							// W³¹czam wyœwietlacz i ustawiam znak na pozycji kursora na miganie
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	0e 94 60 00 	call	0xc0	; 0xc0 <sendCommand>
	PORTA |= 0x01;								// Prze³¹czam LCD w tryb wprowadzania danych
 13e:	d8 9a       	sbi	0x1b, 0	; 27
}
 140:	08 95       	ret

00000142 <LCD_WRITE>:

void LCD_WRITE(char *str) 
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
 148:	03 c0       	rjmp	.+6      	; 0x150 <LCD_WRITE+0xe>
	while(*str)									// Dopóki nie dojdê to null terminatora wypisujê kolejne znaki
	{
		sendChar(*str++);						// Przesuwam siê do kolejnego znaku po wypisaniu go na wyœwietlaczu
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	0e 94 67 00 	call	0xce	; 0xce <sendChar>
	PORTA |= 0x01;								// Prze³¹czam LCD w tryb wprowadzania danych
}

void LCD_WRITE(char *str) 
{
	while(*str)									// Dopóki nie dojdê to null terminatora wypisujê kolejne znaki
 150:	88 81       	ld	r24, Y
 152:	88 23       	and	r24, r24
 154:	d1 f7       	brne	.-12     	; 0x14a <LCD_WRITE+0x8>
	{
		sendChar(*str++);						// Przesuwam siê do kolejnego znaku po wypisaniu go na wyœwietlaczu
	}
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <LCD_XY>:

void LCD_XY(int x, int y)
{
	PORTA &= 0xFE;								// Prze³¹czam LCD w tryb wprowadzania komend
 15c:	d8 98       	cbi	0x1b, 0	; 27
 15e:	e4 ef       	ldi	r30, 0xF4	; 244
 160:	f1 e0       	ldi	r31, 0x01	; 1
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_XY+0x6>
	_delay_ms(2);								// OpóŸnienie w celu wykrycia stanu "0" na pinie RS
	sendCommand(0x80 | x | y << 6);				// Ustawiam kursor na odpowowiedniej pozycji
 166:	80 68       	ori	r24, 0x80	; 128
 168:	96 e0       	ldi	r25, 0x06	; 6
 16a:	66 0f       	add	r22, r22
 16c:	77 1f       	adc	r23, r23
 16e:	9a 95       	dec	r25
 170:	e1 f7       	brne	.-8      	; 0x16a <LCD_XY+0xe>
 172:	86 2b       	or	r24, r22
 174:	0e 94 60 00 	call	0xc0	; 0xc0 <sendCommand>
	PORTA |= 0x01;								// Prze³¹czam LCD w tryb wprowadzania danych
 178:	d8 9a       	sbi	0x1b, 0	; 27
}
 17a:	08 95       	ret

0000017c <LCD_CLEAR_XY>:

void LCD_CLEAR_XY(int x, int y)
{
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	ec 01       	movw	r28, r24
 186:	8b 01       	movw	r16, r22
	LCD_XY(x,y);								// Ustawiam kursor na pozycji od której chcê czyœciæ
 188:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_XY>
	if(y == 0)									// Sprawdzam czy to pierwsza linia
 18c:	01 2b       	or	r16, r17
 18e:	b9 f4       	brne	.+46     	; 0x1be <LCD_CLEAR_XY+0x42>
 190:	05 c0       	rjmp	.+10     	; 0x19c <LCD_CLEAR_XY+0x20>
	{
		while(x++ < 16)							// Dopóki nie dojdê do koñca linii
		{
			LCD_WRITE(" ");						// Wypisujê pusty znak na wyjœcie wyœwietlacza
 192:	8d e6       	ldi	r24, 0x6D	; 109
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_WRITE>
 19a:	21 96       	adiw	r28, 0x01	; 1
void LCD_CLEAR_XY(int x, int y)
{
	LCD_XY(x,y);								// Ustawiam kursor na pozycji od której chcê czyœciæ
	if(y == 0)									// Sprawdzam czy to pierwsza linia
	{
		while(x++ < 16)							// Dopóki nie dojdê do koñca linii
 19c:	c0 31       	cpi	r28, 0x10	; 16
 19e:	d1 05       	cpc	r29, r1
 1a0:	c4 f3       	brlt	.-16     	; 0x192 <LCD_CLEAR_XY+0x16>
		{
			LCD_WRITE(" ");						// Wypisujê pusty znak na wyjœcie wyœwietlacza
		}
		x = 0;									// Ustawiam pierwsz¹ sk³adow¹ adresu na pocz¹tek linii 
		y++;									// Ustawiam drug¹ sk³adow¹ adresu na drug¹ liniê
		LCD_XY(x,y);							// Ustawiam kursor na podany adres -> pocz¹tek drugiej linii
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_XY>
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <LCD_CLEAR_XY+0x42>
	}	
	while(x++ < 16)								// Dopóki nie dojdê do koñca linii
	{
		LCD_WRITE(" ");							// Wypisujê pusty znak na wyjœcie wyœwietlacza
 1b4:	8d e6       	ldi	r24, 0x6D	; 109
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_WRITE>
 1bc:	21 96       	adiw	r28, 0x01	; 1
		}
		x = 0;									// Ustawiam pierwsz¹ sk³adow¹ adresu na pocz¹tek linii 
		y++;									// Ustawiam drug¹ sk³adow¹ adresu na drug¹ liniê
		LCD_XY(x,y);							// Ustawiam kursor na podany adres -> pocz¹tek drugiej linii
	}	
	while(x++ < 16)								// Dopóki nie dojdê do koñca linii
 1be:	c0 31       	cpi	r28, 0x10	; 16
 1c0:	d1 05       	cpc	r29, r1
 1c2:	c4 f3       	brlt	.-16     	; 0x1b4 <LCD_CLEAR_XY+0x38>
	{
		LCD_WRITE(" ");							// Wypisujê pusty znak na wyjœcie wyœwietlacza
	}
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
