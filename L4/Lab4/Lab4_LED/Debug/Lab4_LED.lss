
Lab4_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000172  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a9e  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e1  00000000  00000000  00000d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b7  00000000  00000000  0000145f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027b  00000000  00000000  00001c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001efe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  7a:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <sendHalfByte>:
	sendByte(data);								// Wysy³am znak
	_delay_us(1500);							// Czekam na wypisanie znaku
}

void LCD_CLEAR()
{
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	92 60       	ori	r25, 0x02	; 2
  86:	9b bb       	out	0x1b, r25	; 27
  88:	9b b3       	in	r25, 0x1b	; 27
  8a:	9f 70       	andi	r25, 0x0F	; 15
  8c:	80 7f       	andi	r24, 0xF0	; 240
  8e:	89 2b       	or	r24, r25
  90:	8b bb       	out	0x1b, r24	; 27
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	8d 7f       	andi	r24, 0xFD	; 253
  96:	8b bb       	out	0x1b, r24	; 27
  98:	08 95       	ret

0000009a <sendByte>:
  9a:	cf 93       	push	r28
  9c:	c8 2f       	mov	r28, r24
  9e:	0e 94 41 00 	call	0x82	; 0x82 <sendHalfByte>
  a2:	83 ef       	ldi	r24, 0xF3	; 243
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <sendByte+0xc>
  aa:	00 c0       	rjmp	.+0      	; 0xac <sendByte+0x12>
  ac:	00 00       	nop
  ae:	8c 2f       	mov	r24, r28
  b0:	82 95       	swap	r24
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	0e 94 41 00 	call	0x82	; 0x82 <sendHalfByte>
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <sendCommand>:
  bc:	0e 94 4d 00 	call	0x9a	; 0x9a <sendByte>
  c0:	81 ee       	ldi	r24, 0xE1	; 225
  c2:	94 e0       	ldi	r25, 0x04	; 4
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <sendCommand+0x8>
  c8:	00 c0       	rjmp	.+0      	; 0xca <sendCommand+0xe>
  ca:	00 00       	nop
  cc:	08 95       	ret

000000ce <sendChar>:
  ce:	0e 94 4d 00 	call	0x9a	; 0x9a <sendByte>
  d2:	86 e7       	ldi	r24, 0x76	; 118
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <sendChar+0x8>
  da:	00 c0       	rjmp	.+0      	; 0xdc <sendChar+0xe>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	85 ea       	ldi	r24, 0xA5	; 165
  e2:	9e e0       	ldi	r25, 0x0E	; 14
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_INIT+0x4>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_INIT+0xa>
  ea:	00 00       	nop

void LCD_INIT()
{
	_delay_ms(15); 								// Czekam a¿ wyœwietlacz LCD zostanie zainicjalizowany

	DDRA |= 0xF3;								// Ustawiam czêœæ linii A
  ec:	8a b3       	in	r24, 0x1a	; 26
  ee:	83 6f       	ori	r24, 0xF3	; 243
  f0:	8a bb       	out	0x1a, r24	; 26
		
	sendHalfByte(0x30);							// Inicjalizacja standardowymi bajtami
  f2:	80 e3       	ldi	r24, 0x30	; 48
  f4:	0e 94 41 00 	call	0x82	; 0x82 <sendHalfByte>
  f8:	81 ee       	ldi	r24, 0xE1	; 225
  fa:	94 e0       	ldi	r25, 0x04	; 4
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_INIT+0x1c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_INIT+0x22>
 102:	00 00       	nop
	_delay_ms(5);								// Czekam zgodnie z dokumentacj¹
	sendHalfByte(0x30);
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	0e 94 41 00 	call	0x82	; 0x82 <sendHalfByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	91 e2       	ldi	r25, 0x21	; 33
 10c:	9a 95       	dec	r25
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_INIT+0x2c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_INIT+0x32>
	_delay_us(101);
	sendCommand(0x32);
 112:	82 e3       	ldi	r24, 0x32	; 50
 114:	0e 94 5e 00 	call	0xbc	; 0xbc <sendCommand>
	sendCommand(0x28);							// Ustawiam tryb 2 linii i znaków 5x8
 118:	88 e2       	ldi	r24, 0x28	; 40
 11a:	0e 94 5e 00 	call	0xbc	; 0xbc <sendCommand>
	sendCommand(0x08);							// Wy³¹czam wyœwietlacz zgodnie z dokumentacj¹
 11e:	88 e0       	ldi	r24, 0x08	; 8
 120:	0e 94 5e 00 	call	0xbc	; 0xbc <sendCommand>
	sendCommand(0x01);							// Czyszczê wyœwietlacz
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 5e 00 	call	0xbc	; 0xbc <sendCommand>
	sendCommand(0x07);							// Ustawiam kierunek wyprowadzania tekstu i sposób wyprowadzania na wyœwietlacz
 12a:	87 e0       	ldi	r24, 0x07	; 7
 12c:	0e 94 5e 00 	call	0xbc	; 0xbc <sendCommand>
	sendCommand(0x0D);							// W³¹czam wyœwietlacz i ustawiam znak na pozycji kursora na miganie
 130:	8d e0       	ldi	r24, 0x0D	; 13
 132:	0e 94 5e 00 	call	0xbc	; 0xbc <sendCommand>
	sendCommand(0x90);							// Ustawiam kursor na odpowiedniej pozycji
 136:	80 e9       	ldi	r24, 0x90	; 144
 138:	0e 94 5e 00 	call	0xbc	; 0xbc <sendCommand>
	PORTA |= 0x01;								// Prze³¹czam LCD w tryb wyprowadzania danych;
 13c:	8b b3       	in	r24, 0x1b	; 27
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	8b bb       	out	0x1b, r24	; 27
 142:	08 95       	ret

00000144 <LCD_WRITE>:
}

void LCD_WRITE(char *str) 
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
	while(*str)
 14a:	03 c0       	rjmp	.+6      	; 0x152 <LCD_WRITE+0xe>
	{
		sendChar(*str++);
 14c:	21 96       	adiw	r28, 0x01	; 1
 14e:	0e 94 67 00 	call	0xce	; 0xce <sendChar>
	PORTA |= 0x01;								// Prze³¹czam LCD w tryb wyprowadzania danych;
}

void LCD_WRITE(char *str) 
{
	while(*str)
 152:	88 81       	ld	r24, Y
 154:	81 11       	cpse	r24, r1
 156:	fa cf       	rjmp	.-12     	; 0x14c <LCD_WRITE+0x8>
	{
		sendChar(*str++);
	}
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <main>:
#include "lcd.h"

int main(void)
{
    LCD_INIT();
 15e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_INIT>
	char *imie = "Jacek Wojcik";
	LCD_WRITE(imie);
 162:	80 e6       	ldi	r24, 0x60	; 96
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_WRITE>
    while (1) 
    {
		asm volatile("nop");
 16a:	00 00       	nop
 16c:	fe cf       	rjmp	.-4      	; 0x16a <main+0xc>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
