
Z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000142  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000037  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000a8  00000000  00000000  00000199  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000006e  00000000  00000000  00000241  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000a1  00000000  00000000  000002af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000099  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_10>:
#include <avr/io.h>			// Do³¹czam potrzebne biblioteki
#include <avr/interrupt.h>

volatile char buttons = 0;

ISR (TIMER0_COMP_vect) {    // Przerwanie TIMER0 co 5ms
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	buttons = ~PINA; // Zapamiêtujê zanegowany stan PIN 
  88:	89 b3       	in	r24, 0x19	; 25
  8a:	80 95       	com	r24
  8c:	80 93 60 00 	sts	0x0060, r24
}
  90:	8f 91       	pop	r24
  92:	0f 90       	pop	r0
  94:	0f be       	out	0x3f, r0	; 63
  96:	0f 90       	pop	r0
  98:	1f 90       	pop	r1
  9a:	18 95       	reti

0000009c <main>:

int main(void)
{
	DDRC |= 0x03;			// Ustawiam pin 0 i 1 PORTA jako wyjscie
  9c:	84 b3       	in	r24, 0x14	; 20
  9e:	83 60       	ori	r24, 0x03	; 3
  a0:	84 bb       	out	0x14, r24	; 20

	PORTA |= 0x03;			// Podci¹gam przyciski pod zasilanie
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	8b bb       	out	0x1b, r24	; 27

	OCR0 = 5;                    // ustawienie momentu przerwania na 5 (oko³o 5ms)
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8c bf       	out	0x3c, r24	; 60

	TIMSK |= 0x02;                 // w³¹czenie przerwania TIMER0
  ac:	89 b7       	in	r24, 0x39	; 57
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	89 bf       	out	0x39, r24	; 57

	TCCR0 |= 1 << WGM01 | 1 << CS02 | 1 << CS00;	//	W³¹cza timer 0 w trybie CTC z preskalerem 1/1024
  b2:	83 b7       	in	r24, 0x33	; 51
  b4:	8d 60       	ori	r24, 0x0D	; 13
  b6:	83 bf       	out	0x33, r24	; 51

	sei();                        // w³¹czam obs³ugê przerwañ
  b8:	78 94       	sei
	
	while (1)
	{
		PORTC = (PORTC & 0xFC) | (buttons & 0x03); // Zmieniam stan tylko dwóch pod³¹czonych LEDów w PORTB
  ba:	95 b3       	in	r25, 0x15	; 21
  bc:	80 91 60 00 	lds	r24, 0x0060
  c0:	83 70       	andi	r24, 0x03	; 3
  c2:	9c 7f       	andi	r25, 0xFC	; 252
  c4:	89 2b       	or	r24, r25
  c6:	85 bb       	out	0x15, r24	; 21
  c8:	f8 cf       	rjmp	.-16     	; 0xba <main+0x1e>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
