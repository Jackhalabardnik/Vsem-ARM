
Z3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000e4  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a2  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000529  00000000  00000000  00000792  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020b  00000000  00000000  00000cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ce  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000011de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_10>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  7a:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_10>:
#include <avr/io.h>
#include <avr/interrupt.h>

volatile char number = 1;

ISR (TIMER0_COMP_vect) {    // Przerwanie TIMER0 co 100ms
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
	PORTA ^= 0x01;			// Migam LED0 co 100 milisekund
  90:	9b b3       	in	r25, 0x1b	; 27
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	89 27       	eor	r24, r25
  96:	8b bb       	out	0x1b, r24	; 27
	if(number == 10)			// Odliczam 10 kolejnych cyki timera
  98:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  9c:	8a 30       	cpi	r24, 0x0A	; 10
  9e:	39 f4       	brne	.+14     	; 0xae <__vector_10+0x2c>
	{
		PORTA ^= 0x02;		// Migam LED1 co 1 sekundê
  a0:	9b b3       	in	r25, 0x1b	; 27
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	89 27       	eor	r24, r25
  a6:	8b bb       	out	0x1b, r24	; 27
		number = 1;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	number++;
  ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b2:	8f 5f       	subi	r24, 0xFF	; 255
  b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <main>:

int main(void)
{
	DDRA = 0x03;			// Ustawiam pin 0 i 1 PORTA jako wyjscie
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	8a bb       	out	0x1a, r24	; 26

	OCR0 = 98;                    // ustawienie momentu przerwania na 98 (oko³o 0,1s)
  ca:	82 e6       	ldi	r24, 0x62	; 98
  cc:	8c bf       	out	0x3c, r24	; 60

	TIMSK |= 0x02;                 // w³¹czenie przerwania TIMER0
  ce:	89 b7       	in	r24, 0x39	; 57
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	89 bf       	out	0x39, r24	; 57

	TCCR0 |= 1 << WGM01 | 1 << CS02 | 1 << CS00;	//	W³¹cza timer 0 w trybie CTC z preskalerem 1/1024
  d4:	83 b7       	in	r24, 0x33	; 51
  d6:	8d 60       	ori	r24, 0x0D	; 13
  d8:	83 bf       	out	0x33, r24	; 51

	sei();                        // w³¹czam obs³ugê przerwañ
  da:	78 94       	sei
	
	
	while (1)
	{
		asm volatile("nop");
  dc:	00 00       	nop
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x16>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
