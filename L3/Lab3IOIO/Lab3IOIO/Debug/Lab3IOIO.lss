
Lab3IOIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000310  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  0000033f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c2f  00000000  00000000  00000387  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000005b2  00000000  00000000  00000fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000455  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  000019c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000196  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004a4  00000000  00000000  00001bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  0000206e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000002b8  000002b8  0000030c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.task_3_1 00000054  000001ec  000001ec  00000240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.task_3_2 00000060  0000018c  0000018c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.task_3_3 0000004c  00000240  00000240  00000294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.task_3_4 00000090  0000006c  0000006c  000000c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.task_3_5 00000090  000000fc  000000fc  00000150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    0000002c  0000028c  0000028c  000002e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
   8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
   c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  10:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  14:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  18:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  1c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  20:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  24:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  28:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  2c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  30:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  34:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  38:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  3c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  40:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  44:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  48:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  4c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  50:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  64:	0c 94 34 00 	jmp	0x68	; 0x68 <_exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000002b8 <__bad_interrupt>:
 2b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.task_3_1:

000001ec <task_3_1>:
#include <avr/io.h> //Biblioteka do portów
#include <util/delay.h> // Biblioteka do opóŸnieñ

void task_3_1()  // Zadanie 3.1
{
	PORTD = 0xc0;  // Ustawiam stan PORTD na pocz¹tek animacji
 1ec:	80 ec       	ldi	r24, 0xC0	; 192
 1ee:	82 bb       	out	0x12, r24	; 18
	for(int i=0; i < 3; i++)  // Wykonujê 3 powtórzenia
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	21 c0       	rjmp	.+66     	; 0x238 <task_3_1+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	4f e9       	ldi	r20, 0x9F	; 159
 1f8:	86 e8       	ldi	r24, 0x86	; 134
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	41 50       	subi	r20, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <task_3_1+0x10>
 204:	00 c0       	rjmp	.+0      	; 0x206 <task_3_1+0x1a>
 206:	00 00       	nop
	{
		while(PORTD != 0x03)  // Dopóki nie dojdê do koñca linijki zapalam kolejne LED-y
		{
			_delay_ms(500); // Czekam
			PORTD >>= 1; // Przesuwam animacjê
 208:	82 b3       	in	r24, 0x12	; 18
 20a:	86 95       	lsr	r24
 20c:	82 bb       	out	0x12, r24	; 18
void task_3_1()  // Zadanie 3.1
{
	PORTD = 0xc0;  // Ustawiam stan PORTD na pocz¹tek animacji
	for(int i=0; i < 3; i++)  // Wykonujê 3 powtórzenia
	{
		while(PORTD != 0x03)  // Dopóki nie dojdê do koñca linijki zapalam kolejne LED-y
 20e:	82 b3       	in	r24, 0x12	; 18
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	89 f7       	brne	.-30     	; 0x1f6 <task_3_1+0xa>
 214:	0c c0       	rjmp	.+24     	; 0x22e <task_3_1+0x42>
 216:	4f e9       	ldi	r20, 0x9F	; 159
 218:	86 e8       	ldi	r24, 0x86	; 134
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	41 50       	subi	r20, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <task_3_1+0x30>
 224:	00 c0       	rjmp	.+0      	; 0x226 <task_3_1+0x3a>
 226:	00 00       	nop
			PORTD >>= 1; // Przesuwam animacjê
		}
		while(PORTD != 0xc0) // Dopóki nie wrócê na pocz¹tek linijki zapalam kolejne LED-y
		{
			_delay_ms(500); // Czekam
			PORTD <<= 1; // Przesuwam animacjê
 228:	82 b3       	in	r24, 0x12	; 18
 22a:	88 0f       	add	r24, r24
 22c:	82 bb       	out	0x12, r24	; 18
		while(PORTD != 0x03)  // Dopóki nie dojdê do koñca linijki zapalam kolejne LED-y
		{
			_delay_ms(500); // Czekam
			PORTD >>= 1; // Przesuwam animacjê
		}
		while(PORTD != 0xc0) // Dopóki nie wrócê na pocz¹tek linijki zapalam kolejne LED-y
 22e:	82 b3       	in	r24, 0x12	; 18
 230:	80 3c       	cpi	r24, 0xC0	; 192
 232:	89 f7       	brne	.-30     	; 0x216 <task_3_1+0x2a>
#include <util/delay.h> // Biblioteka do opóŸnieñ

void task_3_1()  // Zadanie 3.1
{
	PORTD = 0xc0;  // Ustawiam stan PORTD na pocz¹tek animacji
	for(int i=0; i < 3; i++)  // Wykonujê 3 powtórzenia
 234:	2f 5f       	subi	r18, 0xFF	; 255
 236:	3f 4f       	sbci	r19, 0xFF	; 255
 238:	23 30       	cpi	r18, 0x03	; 3
 23a:	31 05       	cpc	r19, r1
 23c:	44 f3       	brlt	.-48     	; 0x20e <task_3_1+0x22>
		{
			_delay_ms(500); // Czekam
			PORTD <<= 1; // Przesuwam animacjê
		}
	}
}
 23e:	08 95       	ret

Disassembly of section .text.task_3_2:

0000018c <task_3_2>:

void task_3_2()  // Zadanie 3.2
{
	PORTD = 0x80;  // Ustawiam stan PORTD na pocz¹tek animacji
 18c:	80 e8       	ldi	r24, 0x80	; 128
 18e:	82 bb       	out	0x12, r24	; 18
	for(int i=0; i < 3; i++)  // Wykonujê 3 powtórzenia
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	27 c0       	rjmp	.+78     	; 0x1e4 <task_3_2+0x58>
 196:	4f e9       	ldi	r20, 0x9F	; 159
 198:	86 e8       	ldi	r24, 0x86	; 134
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	41 50       	subi	r20, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <task_3_2+0x10>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <task_3_2+0x1a>
 1a6:	00 00       	nop
	{
		while(PORTD != 0xf0) // Dopóki nie dojdê do œrodka linijki zapalam kolejne LED-y
		{
			_delay_ms(500); // Czekam
			PORTD |= PORTD >> 1; // Zapalam kolejnego LED-a
 1a8:	82 b3       	in	r24, 0x12	; 18
 1aa:	86 95       	lsr	r24
 1ac:	92 b3       	in	r25, 0x12	; 18
 1ae:	89 2b       	or	r24, r25
 1b0:	82 bb       	out	0x12, r24	; 18
void task_3_2()  // Zadanie 3.2
{
	PORTD = 0x80;  // Ustawiam stan PORTD na pocz¹tek animacji
	for(int i=0; i < 3; i++)  // Wykonujê 3 powtórzenia
	{
		while(PORTD != 0xf0) // Dopóki nie dojdê do œrodka linijki zapalam kolejne LED-y
 1b2:	82 b3       	in	r24, 0x12	; 18
 1b4:	80 3f       	cpi	r24, 0xF0	; 240
 1b6:	79 f7       	brne	.-34     	; 0x196 <task_3_2+0xa>
 1b8:	10 c0       	rjmp	.+32     	; 0x1da <task_3_2+0x4e>
 1ba:	4f e9       	ldi	r20, 0x9F	; 159
 1bc:	86 e8       	ldi	r24, 0x86	; 134
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	41 50       	subi	r20, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <task_3_2+0x34>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <task_3_2+0x3e>
 1ca:	00 00       	nop
			PORTD |= PORTD >> 1; // Zapalam kolejnego LED-a
		}
		while(PORTD != 0x80) // Dopóki nie wrócê do punktu z którego zacz¹³em gaszê kolejne LED-y
		{
			_delay_ms(500);  // Czekam
			PORTD &= PORTD << 1;  //Gaszê kolejnego LED-a
 1cc:	82 b3       	in	r24, 0x12	; 18
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	92 b3       	in	r25, 0x12	; 18
 1d6:	89 23       	and	r24, r25
 1d8:	82 bb       	out	0x12, r24	; 18
		while(PORTD != 0xf0) // Dopóki nie dojdê do œrodka linijki zapalam kolejne LED-y
		{
			_delay_ms(500); // Czekam
			PORTD |= PORTD >> 1; // Zapalam kolejnego LED-a
		}
		while(PORTD != 0x80) // Dopóki nie wrócê do punktu z którego zacz¹³em gaszê kolejne LED-y
 1da:	82 b3       	in	r24, 0x12	; 18
 1dc:	80 38       	cpi	r24, 0x80	; 128
 1de:	69 f7       	brne	.-38     	; 0x1ba <task_3_2+0x2e>
}

void task_3_2()  // Zadanie 3.2
{
	PORTD = 0x80;  // Ustawiam stan PORTD na pocz¹tek animacji
	for(int i=0; i < 3; i++)  // Wykonujê 3 powtórzenia
 1e0:	2f 5f       	subi	r18, 0xFF	; 255
 1e2:	3f 4f       	sbci	r19, 0xFF	; 255
 1e4:	23 30       	cpi	r18, 0x03	; 3
 1e6:	31 05       	cpc	r19, r1
 1e8:	24 f3       	brlt	.-56     	; 0x1b2 <task_3_2+0x26>
		{
			_delay_ms(500);  // Czekam
			PORTD &= PORTD << 1;  //Gaszê kolejnego LED-a
		}
	}
}
 1ea:	08 95       	ret

Disassembly of section .text.task_3_3:

00000240 <task_3_3>:

void task_3_3()  // Zadanie 3.3
{
	for(int i=0; i < 3; i++) // Wykonujê 3 powtórzenia
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	1f c0       	rjmp	.+62     	; 0x284 <task_3_3+0x44>
	{
		PORTD = 0x80; // Ustawiam stan PORTD na pocz¹tek animacji
 246:	80 e8       	ldi	r24, 0x80	; 128
 248:	82 bb       	out	0x12, r24	; 18
 24a:	4f e9       	ldi	r20, 0x9F	; 159
 24c:	86 e8       	ldi	r24, 0x86	; 134
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	41 50       	subi	r20, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <task_3_3+0x10>
 258:	00 c0       	rjmp	.+0      	; 0x25a <task_3_3+0x1a>
 25a:	00 00       	nop
 25c:	0e c0       	rjmp	.+28     	; 0x27a <task_3_3+0x3a>
		_delay_ms(500); // Czekam
		while(PORTD != 0xff) // Dopóki nie zapalê ca³ej linijki zapalam kolejne LED-y
		{
			PORTD |= PORTD >> 1; // Zapalam kolejnego LED-a
 25e:	82 b3       	in	r24, 0x12	; 18
 260:	86 95       	lsr	r24
 262:	92 b3       	in	r25, 0x12	; 18
 264:	89 2b       	or	r24, r25
 266:	82 bb       	out	0x12, r24	; 18
 268:	4f e9       	ldi	r20, 0x9F	; 159
 26a:	86 e8       	ldi	r24, 0x86	; 134
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	41 50       	subi	r20, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <task_3_3+0x2e>
 276:	00 c0       	rjmp	.+0      	; 0x278 <task_3_3+0x38>
 278:	00 00       	nop
{
	for(int i=0; i < 3; i++) // Wykonujê 3 powtórzenia
	{
		PORTD = 0x80; // Ustawiam stan PORTD na pocz¹tek animacji
		_delay_ms(500); // Czekam
		while(PORTD != 0xff) // Dopóki nie zapalê ca³ej linijki zapalam kolejne LED-y
 27a:	82 b3       	in	r24, 0x12	; 18
 27c:	8f 3f       	cpi	r24, 0xFF	; 255
 27e:	79 f7       	brne	.-34     	; 0x25e <task_3_3+0x1e>
	}
}

void task_3_3()  // Zadanie 3.3
{
	for(int i=0; i < 3; i++) // Wykonujê 3 powtórzenia
 280:	2f 5f       	subi	r18, 0xFF	; 255
 282:	3f 4f       	sbci	r19, 0xFF	; 255
 284:	23 30       	cpi	r18, 0x03	; 3
 286:	31 05       	cpc	r19, r1
 288:	f4 f2       	brlt	.-68     	; 0x246 <task_3_3+0x6>
		{
			PORTD |= PORTD >> 1; // Zapalam kolejnego LED-a
			_delay_ms(500); // Czekam
		}
	}
}
 28a:	08 95       	ret

Disassembly of section .text.task_3_4:

0000006c <task_3_4>:

void task_3_4()  // Zadanie 3.4
{
	for(int i=0; i < 3; i++)  // Wykonujê 3 powtórzenia
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	40 c0       	rjmp	.+128    	; 0xf2 <task_3_4+0x86>
	{
		PORTD = 0x08; // Ustawiam stan PORTD na pocz¹tek animacji 
  72:	88 e0       	ldi	r24, 0x08	; 8
  74:	82 bb       	out	0x12, r24	; 18
  76:	4f e9       	ldi	r20, 0x9F	; 159
  78:	86 e8       	ldi	r24, 0x86	; 134
  7a:	91 e0       	ldi	r25, 0x01	; 1
  7c:	41 50       	subi	r20, 0x01	; 1
  7e:	80 40       	sbci	r24, 0x00	; 0
  80:	90 40       	sbci	r25, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <task_3_4+0x10>
  84:	00 c0       	rjmp	.+0      	; 0x86 <task_3_4+0x1a>
  86:	00 00       	nop
  88:	0e c0       	rjmp	.+28     	; 0xa6 <task_3_4+0x3a>
		_delay_ms(500); // Czekam
		while(PORTD != 0x0f) // Dopóki nie dojdê do jednego z koñców linijki zapalam kolejne LED-y
		{
			PORTD |= PORTD >> 1; // Zapalam kolejnego LED-a
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	86 95       	lsr	r24
  8e:	92 b3       	in	r25, 0x12	; 18
  90:	89 2b       	or	r24, r25
  92:	82 bb       	out	0x12, r24	; 18
  94:	4f e9       	ldi	r20, 0x9F	; 159
  96:	86 e8       	ldi	r24, 0x86	; 134
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	41 50       	subi	r20, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <task_3_4+0x2e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <task_3_4+0x38>
  a4:	00 00       	nop
{
	for(int i=0; i < 3; i++)  // Wykonujê 3 powtórzenia
	{
		PORTD = 0x08; // Ustawiam stan PORTD na pocz¹tek animacji 
		_delay_ms(500); // Czekam
		while(PORTD != 0x0f) // Dopóki nie dojdê do jednego z koñców linijki zapalam kolejne LED-y
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	8f 30       	cpi	r24, 0x0F	; 15
  aa:	79 f7       	brne	.-34     	; 0x8a <task_3_4+0x1e>
		{
			PORTD |= PORTD >> 1; // Zapalam kolejnego LED-a
			_delay_ms(500); // Czekam
		}
		PORTD ^= 0x1f;  //Odwracam zapalone LED-y w celu przejœcia do kolejnego kroku animacji
  ac:	92 b3       	in	r25, 0x12	; 18
  ae:	8f e1       	ldi	r24, 0x1F	; 31
  b0:	89 27       	eor	r24, r25
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	4f e9       	ldi	r20, 0x9F	; 159
  b6:	86 e8       	ldi	r24, 0x86	; 134
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	41 50       	subi	r20, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <task_3_4+0x4e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <task_3_4+0x58>
  c4:	00 00       	nop
  c6:	10 c0       	rjmp	.+32     	; 0xe8 <task_3_4+0x7c>
		_delay_ms(500); // Czekam
		while(PORTD != 0xf0) // Dopóki nie dojdê do jednego z koñców linijki zapalam kolejne LED-y
		{
			PORTD |= PORTD << 1; // Zapalam kolejnego LED-a
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	92 b3       	in	r25, 0x12	; 18
  d2:	89 2b       	or	r24, r25
  d4:	82 bb       	out	0x12, r24	; 18
  d6:	4f e9       	ldi	r20, 0x9F	; 159
  d8:	86 e8       	ldi	r24, 0x86	; 134
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	41 50       	subi	r20, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <task_3_4+0x70>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <task_3_4+0x7a>
  e6:	00 00       	nop
			PORTD |= PORTD >> 1; // Zapalam kolejnego LED-a
			_delay_ms(500); // Czekam
		}
		PORTD ^= 0x1f;  //Odwracam zapalone LED-y w celu przejœcia do kolejnego kroku animacji
		_delay_ms(500); // Czekam
		while(PORTD != 0xf0) // Dopóki nie dojdê do jednego z koñców linijki zapalam kolejne LED-y
  e8:	82 b3       	in	r24, 0x12	; 18
  ea:	80 3f       	cpi	r24, 0xF0	; 240
  ec:	69 f7       	brne	.-38     	; 0xc8 <task_3_4+0x5c>
	}
}

void task_3_4()  // Zadanie 3.4
{
	for(int i=0; i < 3; i++)  // Wykonujê 3 powtórzenia
  ee:	2f 5f       	subi	r18, 0xFF	; 255
  f0:	3f 4f       	sbci	r19, 0xFF	; 255
  f2:	23 30       	cpi	r18, 0x03	; 3
  f4:	31 05       	cpc	r19, r1
  f6:	0c f4       	brge	.+2      	; 0xfa <task_3_4+0x8e>
  f8:	bc cf       	rjmp	.-136    	; 0x72 <task_3_4+0x6>
		{
			PORTD |= PORTD << 1; // Zapalam kolejnego LED-a
			_delay_ms(500); // Czekam
		}
	}
}
  fa:	08 95       	ret

Disassembly of section .text.task_3_5:

000000fc <task_3_5>:

void task_3_5() // Zadanie 3.5
{
	for(int i=0; i < 3; i++) // Wykonujê 3 powtórzenia
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	40 c0       	rjmp	.+128    	; 0x182 <task_3_5+0x86>
	{
		PORTD = 0x80; // Ustawiam stan PORTD na pocz¹tek animacji 
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	82 bb       	out	0x12, r24	; 18
 106:	4f e9       	ldi	r20, 0x9F	; 159
 108:	86 e8       	ldi	r24, 0x86	; 134
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	41 50       	subi	r20, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <task_3_5+0x10>
 114:	00 c0       	rjmp	.+0      	; 0x116 <task_3_5+0x1a>
 116:	00 00       	nop
 118:	0e c0       	rjmp	.+28     	; 0x136 <task_3_5+0x3a>
		_delay_ms(500); // Czekam
		while(PORTD != 0xf0) // Dopóki nie dojdê do œrodka linijki zapalam kolejne LED-y
		{
			PORTD |= PORTD >> 1; // Zapalam kolejnego LED-a
 11a:	82 b3       	in	r24, 0x12	; 18
 11c:	86 95       	lsr	r24
 11e:	92 b3       	in	r25, 0x12	; 18
 120:	89 2b       	or	r24, r25
 122:	82 bb       	out	0x12, r24	; 18
 124:	4f e9       	ldi	r20, 0x9F	; 159
 126:	86 e8       	ldi	r24, 0x86	; 134
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	41 50       	subi	r20, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <task_3_5+0x2e>
 132:	00 c0       	rjmp	.+0      	; 0x134 <task_3_5+0x38>
 134:	00 00       	nop
{
	for(int i=0; i < 3; i++) // Wykonujê 3 powtórzenia
	{
		PORTD = 0x80; // Ustawiam stan PORTD na pocz¹tek animacji 
		_delay_ms(500); // Czekam
		while(PORTD != 0xf0) // Dopóki nie dojdê do œrodka linijki zapalam kolejne LED-y
 136:	82 b3       	in	r24, 0x12	; 18
 138:	80 3f       	cpi	r24, 0xF0	; 240
 13a:	79 f7       	brne	.-34     	; 0x11a <task_3_5+0x1e>
		{
			PORTD |= PORTD >> 1; // Zapalam kolejnego LED-a
			_delay_ms(500); // Czekam
		} 
		PORTD ^= 0xf1; //Odwracam zapalone LED-y w celu przejœcia do kolejnego kroku animacji
 13c:	92 b3       	in	r25, 0x12	; 18
 13e:	81 ef       	ldi	r24, 0xF1	; 241
 140:	89 27       	eor	r24, r25
 142:	82 bb       	out	0x12, r24	; 18
 144:	4f e9       	ldi	r20, 0x9F	; 159
 146:	86 e8       	ldi	r24, 0x86	; 134
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	41 50       	subi	r20, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <task_3_5+0x4e>
 152:	00 c0       	rjmp	.+0      	; 0x154 <task_3_5+0x58>
 154:	00 00       	nop
 156:	10 c0       	rjmp	.+32     	; 0x178 <task_3_5+0x7c>
		_delay_ms(500); // Czekam
		while(PORTD != 0x0f) // Dopóki nie dojdê do œrodka linijki zapalam kolejne LED-y
		{
			PORTD |= PORTD << 1;
 158:	82 b3       	in	r24, 0x12	; 18
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	92 b3       	in	r25, 0x12	; 18
 162:	89 2b       	or	r24, r25
 164:	82 bb       	out	0x12, r24	; 18
 166:	4f e9       	ldi	r20, 0x9F	; 159
 168:	86 e8       	ldi	r24, 0x86	; 134
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	41 50       	subi	r20, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <task_3_5+0x70>
 174:	00 c0       	rjmp	.+0      	; 0x176 <task_3_5+0x7a>
 176:	00 00       	nop
			PORTD |= PORTD >> 1; // Zapalam kolejnego LED-a
			_delay_ms(500); // Czekam
		} 
		PORTD ^= 0xf1; //Odwracam zapalone LED-y w celu przejœcia do kolejnego kroku animacji
		_delay_ms(500); // Czekam
		while(PORTD != 0x0f) // Dopóki nie dojdê do œrodka linijki zapalam kolejne LED-y
 178:	82 b3       	in	r24, 0x12	; 18
 17a:	8f 30       	cpi	r24, 0x0F	; 15
 17c:	69 f7       	brne	.-38     	; 0x158 <task_3_5+0x5c>
	}
}

void task_3_5() // Zadanie 3.5
{
	for(int i=0; i < 3; i++) // Wykonujê 3 powtórzenia
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	23 30       	cpi	r18, 0x03	; 3
 184:	31 05       	cpc	r19, r1
 186:	0c f4       	brge	.+2      	; 0x18a <task_3_5+0x8e>
 188:	bc cf       	rjmp	.-136    	; 0x102 <task_3_5+0x6>
		{
			PORTD |= PORTD << 1;
			_delay_ms(500); // Czekam
		}
	}
}
 18a:	08 95       	ret

Disassembly of section .text.main:

0000028c <main>:

int main(void)
{
	DDRD = 0xff;  // Ustawiam port D jako wyjœcie
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	81 bb       	out	0x11, r24	; 17
    while(1) // Nieskoñczona pêtla
    {
		task_3_1(); // Zadanie 3.1
 290:	0e 94 f6 00 	call	0x1ec	; 0x1ec <task_3_1>
		task_3_2(); // Zadanie 3.2
 294:	0e 94 c6 00 	call	0x18c	; 0x18c <task_3_2>
		task_3_3(); // Zadanie 3.3
 298:	0e 94 20 01 	call	0x240	; 0x240 <task_3_3>
		task_3_4(); // Zadanie 3.4
 29c:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
		task_3_5(); // Zadanie 3.5
 2a0:	0e 94 7e 00 	call	0xfc	; 0xfc <task_3_5>
 2a4:	2f e9       	ldi	r18, 0x9F	; 159
 2a6:	86 e8       	ldi	r24, 0x86	; 134
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0x1e>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x28>
 2b4:	00 00       	nop
 2b6:	ec cf       	rjmp	.-40     	; 0x290 <main+0x4>
