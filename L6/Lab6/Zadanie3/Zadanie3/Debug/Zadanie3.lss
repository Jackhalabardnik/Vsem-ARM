
Zadanie3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056e  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f1  00000000  00000000  00000beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cc  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>					// Do³¹czam biblioteki do obs³ugi portów i opóŸnieñ
#include <util/delay.h>

int main(void)
{
	DDRB = 0x01;					// Ustawiam PORTB jako wyjœcie
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x01;				// W³¹czam LED
  70:	88 bb       	out	0x18, r24	; 24
	
	OCR0 = 146;				// ustawiam timer na odliczenie 150ms
  72:	82 e9       	ldi	r24, 0x92	; 146
  74:	8c bf       	out	0x3c, r24	; 60
	
	TCCR0 |= 0x0D;				// W³¹czam timer z preskalerem 1/1024 w trybie CTC
  76:	83 b7       	in	r24, 0x33	; 51
  78:	8d 60       	ori	r24, 0x0D	; 13
  7a:	83 bf       	out	0x33, r24	; 51
	
	while (1)
	{
		if(TIFR & 1 << OCF0)
  7c:	08 b6       	in	r0, 0x38	; 56
  7e:	01 fe       	sbrs	r0, 1
  80:	fd cf       	rjmp	.-6      	; 0x7c <main+0x10>
		{
			TIFR |= 1 << OCF0;
  82:	88 b7       	in	r24, 0x38	; 56
  84:	82 60       	ori	r24, 0x02	; 2
  86:	88 bf       	out	0x38, r24	; 56
			if(PORTB)
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	88 23       	and	r24, r24
  8c:	21 f0       	breq	.+8      	; 0x96 <main+0x2a>
			{
				PORTB = 0x00;				// Wy³¹czam LED
  8e:	18 ba       	out	0x18, r1	; 24
				OCR0 = 48;				// ustawiam timer na odliczenie 50ms
  90:	80 e3       	ldi	r24, 0x30	; 48
  92:	8c bf       	out	0x3c, r24	; 60
  94:	f3 cf       	rjmp	.-26     	; 0x7c <main+0x10>
			}
			else
			{
				PORTB = 0x01;				// W³¹czam LED
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	88 bb       	out	0x18, r24	; 24
				OCR0 = 146;				// ustawiam timer na odliczenie 150ms
  9a:	82 e9       	ldi	r24, 0x92	; 146
  9c:	8c bf       	out	0x3c, r24	; 60
  9e:	ee cf       	rjmp	.-36     	; 0x7c <main+0x10>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
